<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function gsb_public_install() {

  $actions = array(
    'revert',
    'migration_prep',
    'siteinfo',
    'time_date',
    'userinfo',
    'roles',
    'users',
    'filter_formats',
    'taxonomy',
    'workbench',
    'panopoly',
    'pathauto',
    'cron',
    'cache',
    'files',
    'image_styles',
    'themes',
    'media',
    'menu',
    'blocks',
    'fancybox',
    'login_destination',
    'acquia',
    'ds',
    'quickbar',
    'panels',
    'cleanup',  // please leave this as the last task to run
  );

  foreach($actions as $action) {
    _gsb_public_print('Starting ' . $action . ' action');
    $time_start = microtime(true);
    include_once('includes/' . $action . '.install.inc');
    $func = '_gsb_public_setup_' . $action;
    $func();
    $time_end = microtime(true);
    $time = $time_end - $time_start;
    _gsb_public_print('End of ' . $action . ' action. Completed in ' . $time . ' seconds.');
  }
}

function _gsb_public_print($text) {
  if (PHP_SAPI == 'cli') {
    drush_print($text);
  }
}

function _gsb_public_variable_set_multiple($variables) {
  foreach($variables as $variable => $value) {
    variable_set($variable, $value);
  }
}

/**
 * Add a 'year' date format.
 */
function gsb_public_update_7000() {
  // Insert custom format: 2011
  db_insert('date_formats')
    ->fields(array('format' => 'Y', 'type' => 'custom', 'locked' => 0))
    ->execute();
  // Insert custom format: 2011
  db_insert('date_format_type')
    ->fields(array('type' => 'year', 'title' => 'Year', 'locked' => 0))
    ->execute();
  // Date Year Format
  variable_set('date_format_year', 'Y');
}

/**
 * Add a video image format.
 */
function gsb_public_update_7001() {
  // Declare our image styles
  $image_styles = array(
    '270x158_video' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '270',
          'height' => '158',
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'canvasactions_file2canvas',
        'data' => array(
          'xpos' => 'center',
          'ypos' => 'center',
          'alpha' => 100,
          'path' => 'profiles/gsb_public/themes/gsb_theme/images/video_play.png',
        ),
        'weight' => 2,
      ),
    ),
  );
  _gsb_public_install_add_image_style($image_styles);
}

/**
 * Add a 'time_only' date format.
 */
function gsb_public_update_7002() {
  // Insert custom format: 2:45pm
  db_insert('date_formats')
    ->fields(array('format' => 'g:ia', 'type' => 'custom', 'locked' => 0))
    ->execute();
  // Insert custom format: 2:45pm
  db_insert('date_format_type')
    ->fields(array('type' => 'time_only', 'title' => 'Time only', 'locked' => 0))
    ->execute();
  // Date Time only Format
  variable_set('date_format_time_only', 'g:ia');
}

/**
 * Add a 'dayname_no_year' date format.
 */
function gsb_public_update_7003() {
  // Insert custom format: 2:45pm
  db_insert('date_formats')
    ->fields(array('format' => 'l, M d', 'type' => 'custom', 'locked' => 0))
    ->execute();
  // Insert custom format: 2:45pm
  db_insert('date_format_type')
    ->fields(array('type' => 'dayname_no_year', 'title' => 'Day name, no year', 'locked' => 0))
    ->execute();
  // Date Time only Format
  variable_set('date_format_dayname_no_year', 'l, M d');
}

/**
 * Add another image style.
 */
function gsb_public_update_7004() {
  // Declare our image styles
  $image_styles = array(
    '566x396' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 566,
          'height' => 396,
        ),
        'weight' => 1,
      ),
    ),
  );
  _gsb_public_install_add_image_style($image_styles);
}

/**
 * Adds image styles
 */
function _gsb_public_install_add_image_style($image_styles) {
  // Loop through the image styles and add them.
  foreach ($image_styles as $name => $effects) {
    $style = image_style_save(array('name' => $name));
    foreach ($effects as $effect) {
      $effect['isid'] = $style['isid'];
      image_effect_save($effect);
    }
  }
}

/**
 * Enable the addthis and computed_field modules.
 */
function gsb_public_update_7005() {
  module_enable(array('addthis', 'computed_field'));
}

/**
 * Add another image style.
 */
function gsb_public_update_7006() {
  // Declare our image styles
  $image_styles = array(
    '145x_variable' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 145,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
    ),
  );
  _gsb_public_install_add_image_style($image_styles);
}

/**
 * Add pathauto ignore words
 */
function gsb_public_update_7007() {
  variable_set("pathauto_ignore_words",
    "a, an, as, at, before, but, by, for, from, is, in, into, like, of, off, on, onto, our, per, since, than, the, this, that, to, up, via, with");
}


/**
 * Update the 'event_category' vocabulary
 */
function gsb_public_update_7008() {

  $vocab_found = false;
  $term_found = false;

  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vid => $vocabulary) {
    if ($vocabulary->machine_name == 'event_category') {
      $vocab_found = true;
      break;
    }
  }

  if ($vocab_found) {

    $terms = taxonomy_get_tree($vid);
    foreach ($terms as $key => $term) {
      if ($term->name == 'On-campus Events') {
        $term_found = true;
        break;
      }
    }

    if ($term_found) {
      // Rename term 'On-campus Events'
      // to.         'On-campus'
      $term->name = 'On-campus';
      taxonomy_term_save($term);
    }

    // Add term 'Diverse Communities'

    $term = (object) array(
      'vid' => $vocabulary->vid,
      'name' => 'Diverse Communities',
    );
    taxonomy_term_save($term);

  }

}

/**
 * Enable diff and breadcrumbs_by_path module.
 */
function gsb_public_update_7009() {
  module_enable(array('diff', 'breadcrumbs_by_path'));

  db_query("UPDATE {system} SET weight = '-6' WHERE name = 'breadcrumbs_by_path'");
}

// Enable breakpoints module.
function gsb_public_update_7010() {
  module_enable(array('breakpoints'));
}

// Enable gsb_tokens module.
function gsb_public_update_7011() {
  module_enable(array('gsb_tokens'));
}

/**
 * Update the gsb_wysiwyg_text format filter
 */
function gsb_public_update_7012() {
  $format = filter_format_load('gsb_wysiwyg_text');
  $filters = filter_list_format($format->format);
  // Build the $format->filters array...
  $format->filters = array();
  foreach($filters as $name => $filter) {
    foreach($filter as $k => $v) {
      $format->filters[$name][$k] = $v;
    }
  }
  $format->filters["wysiwyg"]['settings']["valid_elements"] =
    "a[!href|target<_blank|title|style],\n" .
    "div[style|class|id|align<center?justify?left?right],\n" .
    "p,br,em,i,strong,u,cite,blockquote,hr,ul,ol,li,dl,dt,dd,sup,sub,\n" .
    "table,tbody,thead,th,tr,td,\n" .
    "span[style|id],p[style|class|id],\n" .
    "h1,h2,h3,h4,h5,h6,\n" .
    "object,iframe,area,embed,\n" .
    "address,abbr,caption,pre,code,script,\n" .
    "img[!src|title|alt|style|width|height|class|hspace|vspace|id],\n" .
    "@[style]";
  // Save the panopoly wysiwyg format.
  filter_format_save($format);
}

/**
 * Update the wysiwyg modules
 */
function gsb_public_update_7013() {

  // Disable some wysiwyg modules

  module_disable(array('gsb_panopoly_wyiswyg_override'));
  drupal_uninstall_modules(array('gsb_panopoly_wyiswyg_override'));

  module_disable(array('panopoly_wyiswyg'));
  drupal_uninstall_modules(array('panopoly_wyiswyg'));

  module_disable(array('wysiwyg_filter'));
  drupal_uninstall_modules(array('wysiwyg_filter'));

  // Update the body field

  $num_updated = db_update('field_revision_field_body')
    ->fields(array(
      'field_body_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_body_format', 'panopoly_wysiwyg_text', '=')
    ->execute();

  $num_updated = db_update('field_data_field_body')
    ->fields(array(
      'field_body_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_body_format', 'panopoly_wysiwyg_text', '=')
    ->execute();

}

/**
 * Remove navbar and related modules
 */
function gsb_public_update_7014() {

  // Remove navbar and related modules

  module_disable(array('gsb_admin_enhancements'));
  drupal_uninstall_modules(array('gsb_admin_enhancements'));

  module_disable(array('navbar'));
  drupal_uninstall_modules(array('navbar'));

  // Enable the admin menu modules

  module_enable(array('admin_menu','admin_menu_toolbar'));

}

/**
 * Enable gsb_feature_gsa_search module.
 */
function gsb_public_update_7015() {
  module_enable(array('gsb_feature_gsa_search'));
}

/**
 * Update the gsb_wysiwyg_text format filter allowed html settings
 */
function gsb_public_update_7016() {

  $format = filter_format_load('gsb_wysiwyg_text');
  $filters = filter_list_format($format->format);

  // Build the $format->filters array...
  $format->filters = array();
  foreach($filters as $name => $filter) {
    foreach($filter as $k => $v) {
      $format->filters[$name][$k] = $v;
    }
  }

  $format->filters["filter_html"]['status'] = '1';
  $format->filters["filter_html"]['settings']['allowed_html'] = '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <div> <p> <br> <i> <u> <cite> <hr> <sub> <sup> <table> <tbody> <thead> <th> <tr> <td> <span> <h1> <h2> <h3> <h4> <h5> <h6> <object> <iframe> <area> <embed> <address> <abbr> <caption> <pre> <code> <script> <img>';

  // Save the format.
  filter_format_save($format);

}

/*
 * Add 450x263 and 450x263_video image format.
 */
function gsb_public_update_7017() {
  // Declare our image styles
  $image_styles = array(
    '450x263' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '450',
          'height' => '263',
        ),
      ),
    ),
    '450x263_video' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '450',
          'height' => '263',
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'canvasactions_file2canvas',
        'data' => array(
          'xpos' => 'center',
          'ypos' => 'center',
          'alpha' => 100,
          'path' => 'profiles/gsb_public/themes/gsb_theme/images/video_play.png',
        ),
        'weight' => 2,
      ),
    ),
    '600x440' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '600',
          'height' => '440',
        ),
      ),
    ),
  );
  _gsb_public_install_add_image_style($image_styles);
}

/**
 * Enable gsb_feature_diptych_fpp module.
 */
function gsb_public_update_7018() {
  module_enable(array('gsb_feature_diptych_fpp'));
}

/**
 * Enable simplesaml_auth module.
 */
function gsb_public_update_7019() {
  module_enable(array('simplesaml_auth'));
}

/**
 * Enable gsb_feature_academic_calendar_ct module.
 */
function gsb_public_update_7020() {
  module_enable(array('gsb_feature_academic_calendar_ct'));
}

/**
 * Enable gsb_feature_academic_calendar_display module.
 */
function gsb_public_update_7021() {
  module_enable(array('gsb_feature_academic_calendar_display'));
}

/**
 * Enable backup_migrate module.
 */
function gsb_public_update_7022() {
  module_enable(array('backup_migrate'));
}

/**
 * Setting gsb_fpp_customization to follow panopoly_magic, in the module peckin' order.
 */
function gsb_public_update_7023() {

  // Make the weight of gsb_fpp_customization one higher than panopoly_magic.
  $weight = db_select('system', 's')
              ->fields('s', array('weight'))
              ->condition('name', 'panopoly_magic', '=')
              ->execute()
              ->fetchField();

  db_update('system')
    ->fields(array('weight' => $weight +1))
    ->condition('name', 'gsb_fpp_customization', '=')
    ->execute();
}

/**
 * Enable phone and webform_phone modules.
 */
function gsb_public_update_7024() {
  module_enable(array('phone', "webform_phone"));
}

/**
 * Enable house ads feature.
 */
function gsb_public_update_7025() {
  module_enable(array('gsb_feature_house_ads_fpp'));
}

/**
 * Add a 'european_date_format' date format.
 */
function gsb_public_update_7026() {
  // Insert custom format: 25 Nov 2011
  db_insert('date_formats')
    ->fields(array('format' => 'd M Y', 'type' => 'custom', 'locked' => 0))
    ->execute();
  // Insert custom format: 2011
  db_insert('date_format_type')
    ->fields(array('type' => 'european_date_format', 'title' => 'European date format', 'locked' => 0))
    ->execute();
  // Date Year Format
  variable_set('european_date_format', 'd M Y');
}

/**
 * Insert 'Off-campus' term into 'Event Category' vocab.
 */
function gsb_public_update_7027() {
  $fields = array(
    'tid' => '10582',
    'parent' => 0,
  );
  db_insert('taxonomy_term_hierarchy')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '10582',
    'vid' => 136,
    'name' => 'Off-campus',
    'description' => NULL,
    'format' => NULL,
    'weight' => 0,
    'uuid' => '55e1bbfc-fe67-4f12-994e-d6c57e57c889',
  );
  db_insert('taxonomy_term_data')
    ->fields($fields)
    ->execute();
}

/**
 * Enable gsb panopoly magic customization module
 */
function gsb_public_update_7028() {
  module_enable(array('gsb_panopoly_magic_customization'));
}

/**
 * Insert 'MS' term into 'Program' vocab.
 */
function gsb_public_update_7029() {
  $fields = array(
    'tid' => '10887',
    'parent' => 0,
  );
  db_insert('taxonomy_term_hierarchy')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '10887',
    'vid' => 151,
    'name' => 'MS',
    'description' => NULL,
    'format' => NULL,
    'weight' => 0,
    'uuid' => '73271ac4-f333-400f-a25d-96ea10e5337d',
  );
  db_insert('taxonomy_term_data')
    ->fields($fields)
    ->execute();
}

/*
 * Set the 'allowed layouts' for the page content type
 */
function gsb_public_update_7030() {

  // Set the 'allowed layouts' for the page content type

  $value = 'O:22:"panels_allowed_layouts":4:{s:9:"allow_new";b:1;s:11:"module_name";s:19:"panelizer_node:page";s:23:"allowed_layout_settings";a:47:{s:8:"flexible";b:1;s:14:"twocol_stacked";b:1;s:13:"twocol_bricks";b:1;s:6:"twocol";b:1;s:25:"threecol_33_34_33_stacked";b:1;s:17:"threecol_33_34_33";b:1;s:25:"threecol_25_50_25_stacked";b:1;s:17:"threecol_25_50_25";b:1;s:6:"onecol";b:1;s:6:"whelan";b:1;s:12:"webb_flipped";b:1;s:4:"webb";b:1;s:14:"taylor_flipped";b:1;s:6:"taylor";b:1;s:12:"sutro_double";b:1;s:5:"sutro";b:1;s:13:"selby_flipped";b:1;s:5:"selby";b:1;s:17:"sanderson_flipped";b:1;s:9:"sanderson";b:1;s:5:"rolph";b:1;s:4:"pond";b:1;s:6:"phelan";b:1;s:15:"moscone_flipped";b:1;s:7:"moscone";b:1;s:8:"mccoppin";b:1;s:15:"hewston_flipped";b:1;s:7:"hewston";b:1;s:6:"harris";b:1;s:5:"geary";b:1;s:12:"burr_flipped";b:1;s:4:"burr";b:1;s:22:"bryant_flipped_flipped";b:1;s:6:"bryant";b:1;s:5:"brown";b:1;s:15:"brenham_flipped";b:1;s:7:"brenham";b:1;s:6:"boxton";b:1;s:16:"bartlett_flipped";b:1;s:8:"bartlett";b:1;s:26:"minipanel-two-columns-wide";b:1;s:20:"minipanel-one-column";b:1;s:21:"gsb-standard-page-two";b:1;s:29:"gsb-landing-standard-page-one";b:1;s:18:"gsb-landing-events";b:0;s:14:"gsb-front-page";b:0;s:21:"gsb-business-insights";b:0;}s:10:"form_state";N;}';

  variable_set('panelizer_node:page_allowed_layouts', $value);
  variable_set('panelizer_node:event_allowed_layouts', $value);
  variable_set('panelizer_node:webform_allowed_layouts', $value);

  variable_set('panelizer_node:page_allowed_layouts_default', 0);
  variable_set('panelizer_node:event_allowed_layouts_default', 0);
  variable_set('panelizer_node:webform_allowed_layouts_default', 0);

}

/**
 * Change date formats that contain M.
 */
function gsb_public_update_7031() {
  db_update('date_formats')->fields(array('format' => 'M j, Y - g:ia'))->condition('format', 'M. j, Y - g:ia')->execute();
  db_update('date_formats')->fields(array('format' => 'M j, Y'))->condition('format', 'M. j, Y')->execute();
  variable_set('date_format_medium', 'M j, Y');
  variable_set('date_format_medium_time', 'M j, Y - g:ia');
}

/**
 * Enable pathauto_title_alias module.
 */
function gsb_public_update_7032() {
  module_enable(array('pathauto_title_alias'));
}

/**
 * Enable gsb_fpp_stock_content module.
 */
function gsb_public_update_7033() {
  module_enable(array('gsb_fpp_stock_content'));
}

/**
 * Insert 'View From The Top' term into 'Event Series' vocab.
 */
function gsb_public_update_7034() {
  $fields = array(
    'tid' => '10602',
    'parent' => 0,
  );
  db_insert('taxonomy_term_hierarchy')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '10602',
    'vid' => 141,
    'name' => 'View From The Top',
    'description' => NULL,
    'format' => NULL,
    'weight' => 0,
    'uuid' => '20fd5ebe-bfff-4322-b57d-155fd6743ee0',
  );
  db_insert('taxonomy_term_data')
    ->fields($fields)
    ->execute();
}

/**
 * Enable gsb_feature_workbench module.
 */
function gsb_public_update_7035() {
  module_enable(array('gsb_feature_workbench'));
}

/**
 * Enable menu_trail_by_path module.
 */
function gsb_public_update_7036() {
  module_enable(array('menu_trail_by_path'));
}

/**
 * Update image styles
 */
function gsb_public_update_7037() {

  // Declare our image styles
  $image_styles = array(
    '170x170' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '170',
          'height' => '170',
        ),
      ),
    ),
    '270x158' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '270',
          'height' => '158',
        ),
      ),
    ),
    '270x158_video' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '270',
          'height' => '158',
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'canvasactions_file2canvas',
        'data' => array(
          'xpos' => 'center',
          'ypos' => 'center',
          'alpha' => 100,
          'path' => 'profiles/gsb_public/themes/gsb_theme/images/video_play.png',
        ),
        'weight' => 2,
      ),
    ),
    '450x263' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 450,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'image_crop',
        'data' => array(
          'width' => 450,
          'height' => 263,
          'anchor' => 'center-top',
        ),
        'weight' => 2,
      ),
    ),
    '450x263_video' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 450,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'image_crop',
        'data' => array(
          'width' => 450,
          'height' => 263,
          'anchor' => 'center-top',
        ),
        'weight' => 2,
      ),
      array(
        'name' => 'canvasactions_file2canvas',
        'data' => array(
          'xpos' => 'center',
          'ypos' => 'center',
          'alpha' => 100,
          'path' => 'profiles/gsb_public/themes/gsb_theme/images/video_play.png',
        ),
        'weight' => 3,
      ),
    ),
    '600x440' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '600',
          'height' => '440',
        ),
      ),
    ),
    '627x367' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '627',
          'height' => '367',
        ),
      ),
    ),
    '170x100' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '170',
          'height' => '100',
        ),
      ),
    ),
    '44x44' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '44',
          'height' => '44',
        ),
      ),
    ),
    '566x396' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 566,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'image_crop',
        'data' => array(
          'width' => 566,
          'height' => 396,
          'anchor' => 'center-top',
        ),
        'weight' => 2,
      ),
    ),
    '145x_variable' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 145,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
    ),
    '566x_variable' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 566,
          'height' => '',
        ),
        'weight' => 1,
      ),
    ),
  );

  // Loop through the image styles and add them.
  foreach ($image_styles as $name => $effects) {

    $style = image_style_load($name);

    if (empty($style)) {
      $style = image_style_save(array('name' => $name));
    } else {
      $style_effects = $style['effects'];
      foreach ($style_effects as $style_effect) {
        image_effect_delete($style_effect);
      }
    }

    foreach ($effects as $effect) {
      $effect['isid'] = $style['isid'];
      image_effect_save($effect);
    }

  }

}

/**
 * Update image styles for media's image preview and teaser
 */
function gsb_public_update_7038() {

  // overriding image view modes preview and teaser which are
  // initially setup in media.module

  module_load_include('inc', 'file_entity', 'file_entity.file_api');

  $default_image_styles = array(
    'preview' => '450x263',
    'teaser' => '450x263',
  );

  foreach ($default_image_styles as $view_mode => $image_style) {

    $image_displays = file_displays_load('image', $view_mode);

    $display_name = 'image__' . $view_mode . '__file_image';;

    if (isset($image_displays[$display_name])) {
      $display = $image_displays[$display_name];
      $display->settings['image_style'] = $image_style;
      file_display_save((object) $display);
    }

  }

}


/**
 * Enable gsb_feature_image_styles module.
 */
function gsb_public_update_7039() {
  module_enable(array('gsb_feature_image_styles'));
}

/**
 * Insert new terms into 'Department' vocab.
 */
function gsb_public_update_7040() {

  $fields = array(
    'tid' => '12691',
    'parent' => 0,
  );
  db_insert('taxonomy_term_hierarchy')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '12691',
    'vid' => 126,
    'name' => 'Financial Aid Office',
    'description' => NULL,
    'format' => NULL,
    'weight' => 0,
    'uuid' => '1d0ab1b4-e3b6-4b6c-ac65-c72b7cd24c24',
  );
  db_insert('taxonomy_term_data')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '12696',
    'parent' => 0,
  );
  db_insert('taxonomy_term_hierarchy')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '12696',
    'vid' => 126,
    'name' => 'Schwab Residential Center',
    'description' => NULL,
    'format' => NULL,
    'weight' => 0,
    'uuid' => 'eb97f609-8c1f-42fa-aea0-f44c480733bb',
  );
  db_insert('taxonomy_term_data')
    ->fields($fields)
    ->execute();

}

/**
 * Insert new terms into 'Department' vocab.
 */
function gsb_public_update_7041() {
  $terms = array(
    // tid, vid, name, description, format, weight, uuid, parent
    array(12697, 126, 'Library', NULL, NULL, 0, '55c6cad0-9dc7-4c83-8f69-5d7fce9cd21c', 0),
    array(12698, 126, 'Marketing and Communications', NULL, NULL, 0, 'b7ea5692-5461-4098-96d6-63739b1d1faa', 0),
    array(12699, 126, 'Behavioral Lab', NULL, NULL, 0, 'b712f5ce-ad21-4195-8452-30a1935c07a5', 0),
    array(12701, 126, 'Global Innovation Programs', NULL, NULL, 0, '4069965f-05dd-4c67-ab6e-ebab14d89206', 0),
    array(12702, 126, 'Academic Administration', NULL, NULL, 0, '5f971c42-03c1-46b1-9469-93572c213c65', 0),
    array(12704, 126, 'Stanford MSx Program', NULL, NULL, 0, '9448bf0f-8e6b-40f1-aad5-5ad10f45c9ae', 0),
    array(12705, 126, 'Faculty Support', NULL, NULL, 0, 'de4f8306-3995-4b03-8047-5a8dfd6d431c', 0),
  );

  foreach ($terms as $term) {
    list($tid, $vid, $name, $description, $format, $weight, $uuid, $parent) = $term;
    $fields = array(
      'tid' => $tid,
      'parent' => $parent,
    );

    db_insert('taxonomy_term_hierarchy')
      ->fields($fields)
      ->execute();

    $fields = array(
      'tid' => $tid,
      'vid' => $vid,
      'name' => $name,
      'description' => $description,
      'format' => $format,
      'weight' => $weight,
      'uuid' => $uuid,
    );

    db_insert('taxonomy_term_data')
      ->fields($fields)
      ->execute();
  }
 
/**
 * Enable gsb_panels_ipe_overrides module.
 */
function gsb_public_update_7042() {
  module_enable(array('gsb_panels_ipe_overrides'));
}

/**
 * Alpha sort the programs.
 */
function gsb_public_update_7041() {

 db_update('taxonomy_term_data')
    ->fields(array('weight' => 0))
    ->condition('vid', '151', '=')
    ->condition('name', 'Executive Education', '=')
    ->execute();

 db_update('taxonomy_term_data')
    ->fields(array('weight' => 1))
    ->condition('vid', '151', '=')
    ->condition('name', 'MBA', '=')
    ->execute();

 db_update('taxonomy_term_data')
    ->fields(array('weight' => 2))
    ->condition('vid', '151', '=')
    ->condition('name', 'MS', '=')
    ->execute();

 db_update('taxonomy_term_data')
    ->fields(array('weight' => 3))
    ->condition('vid', '151', '=')
    ->condition('name', 'MSx', '=')
    ->execute();

 db_update('taxonomy_term_data')
    ->fields(array('weight' => 4))
    ->condition('vid', '151', '=')
    ->condition('name', 'PhD', '=')
    ->execute();    

 db_update('taxonomy_term_data')
    ->fields(array('weight' => 5))
    ->condition('vid', '151', '=')
    ->condition('name', 'SEED Program', '=')
    ->execute();

 db_update('taxonomy_term_data')
    ->fields(array('weight' => 6))
    ->condition('vid', '151', '=')
    ->condition('name', 'SIGM', '=')
    ->execute();

 db_update('taxonomy_term_data')
    ->fields(array('weight' => 7))
    ->condition('vid', '151', '=')
    ->condition('name', 'Social Innovation Program', '=')
    ->execute();

 db_update('taxonomy_term_data')
    ->fields(array('weight' => 8))
    ->condition('vid', '151', '=')
    ->condition('name', 'Stanford Ignite', '=')
    ->execute();

}    


